{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Router from \"next/router\";\nexport function getStrapiURL() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return \"\".concat(process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\").concat(path);\n} // Helper to make GET requests to Strapi\n\nexport function fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var requestUrl, response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestUrl = getStrapiURL(path);\n            _context.next = 3;\n            return fetch(requestUrl);\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function updateAPI() {\n  return _updateAPI.apply(this, arguments);\n}\n\nfunction _updateAPI() {\n  _updateAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var url,\n        data,\n        newUrl,\n        requestUrl,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : \"\";\n            data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            newUrl = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : null;\n            requestUrl = getStrapiURL(url);\n            _context2.next = 6;\n            return fetch(requestUrl, {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(data)\n            });\n\n          case 6:\n            if (newUrl) {\n              Router.push(window.location.origin + newUrl);\n            } else {\n              Router.reload(window.location.pathname);\n            }\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _updateAPI.apply(this, arguments);\n}\n\nexport function createAPI() {\n  return _createAPI.apply(this, arguments);\n}\n\nfunction _createAPI() {\n  _createAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var url,\n        data,\n        requestUrl,\n        response,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            url = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : \"\";\n            data = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n            requestUrl = getStrapiURL(url);\n            _context3.next = 5;\n            return fetch(requestUrl, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(data)\n            });\n\n          case 5:\n            response = _context3.sent;\n            console.log(response); // Router.reload(window.location.pathname);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _createAPI.apply(this, arguments);\n}\n\nexport function deleteAPI() {\n  return _deleteAPI.apply(this, arguments);\n}\n\nfunction _deleteAPI() {\n  _deleteAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var url,\n        requestUrl,\n        _args4 = arguments;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            url = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : \"\";\n            requestUrl = getStrapiURL(url);\n            _context4.next = 4;\n            return fetch(requestUrl, {\n              method: \"DELETE\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n\n          case 4:\n            Router.push(\"/\"); // Router.reload(window.location.pathname);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _deleteAPI.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/JobappNext/my-project/frontend/lib/api.js"],"names":["Router","getStrapiURL","path","process","env","NEXT_PUBLIC_STRAPI_API_URL","fetchAPI","requestUrl","fetch","response","json","data","updateAPI","url","newUrl","method","headers","body","JSON","stringify","push","window","location","origin","reload","pathname","createAPI","console","log","deleteAPI"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,OAAO,SAASC,YAAT,GAAiC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACtC,mBACEC,OAAO,CAACC,GAAR,CAAYC,0BAAZ,IAA0C,uBAD5C,SAEGH,IAFH;AAGD,C,CAED;;AACA,gBAAsBI,QAAtB;AAAA;AAAA;;;uEAAO,iBAAwBJ,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCK,YAAAA,UADD,GACcN,YAAY,CAACC,IAAD,CAD1B;AAAA;AAAA,mBAEkBM,KAAK,CAACD,UAAD,CAFvB;;AAAA;AAECE,YAAAA,QAFD;AAAA;AAAA,mBAGcA,QAAQ,CAACC,IAAT,EAHd;;AAAA;AAGCC,YAAAA,IAHD;AAAA,6CAIEA,IAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOP,gBAAsBC,SAAtB;AAAA;AAAA;;;wEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBC,YAAAA,GAAzB,8DAA+B,EAA/B;AAAmCF,YAAAA,IAAnC,8DAA0C,EAA1C;AAA8CG,YAAAA,MAA9C,8DAAuD,IAAvD;AACCP,YAAAA,UADD,GACcN,YAAY,CAACY,GAAD,CAD1B;AAAA;AAAA,mBAECL,KAAK,CAACD,UAAD,EAAa;AACtBQ,cAAAA,MAAM,EAAE,KADc;AAEtBC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFa;AAKtBC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AALgB,aAAb,CAFN;;AAAA;AASL,gBAAIG,MAAJ,EAAY;AACVd,cAAAA,MAAM,CAACoB,IAAP,CAAYC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyBT,MAArC;AACD,aAFD,MAEO;AACLd,cAAAA,MAAM,CAACwB,MAAP,CAAcH,MAAM,CAACC,QAAP,CAAgBG,QAA9B;AACD;;AAbI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBP,gBAAsBC,SAAtB;AAAA;AAAA;;;wEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBb,YAAAA,GAAzB,8DAA+B,EAA/B;AAAmCF,YAAAA,IAAnC,8DAA0C,EAA1C;AACCJ,YAAAA,UADD,GACcN,YAAY,CAACY,GAAD,CAD1B;AAAA;AAAA,mBAEkBL,KAAK,CAACD,UAAD,EAAa;AACvCQ,cAAAA,MAAM,EAAE,MAD+B;AAEvCC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAF8B;AAKvCC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AALiC,aAAb,CAFvB;;AAAA;AAECF,YAAAA,QAFD;AASLkB,YAAAA,OAAO,CAACC,GAAR,CAAYnB,QAAZ,EATK,CAUL;;AAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaP,gBAAsBoB,SAAtB;AAAA;AAAA;;;wEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBhB,YAAAA,GAAzB,8DAA+B,EAA/B;AACCN,YAAAA,UADD,GACcN,YAAY,CAACY,GAAD,CAD1B;AAAA;AAAA,mBAECL,KAAK,CAACD,UAAD,EAAa;AACtBQ,cAAAA,MAAM,EAAE,QADc;AAEtBC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAFa,aAAb,CAFN;;AAAA;AAQLhB,YAAAA,MAAM,CAACoB,IAAP,CAAY,GAAZ,EARK,CASL;;AATK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import Router from \"next/router\";\n\nexport function getStrapiURL(path = \"\") {\n  return `${\n    process.env.NEXT_PUBLIC_STRAPI_API_URL || \"http://localhost:1337\"\n  }${path}`;\n}\n\n// Helper to make GET requests to Strapi\nexport async function fetchAPI(path) {\n  const requestUrl = getStrapiURL(path);\n  const response = await fetch(requestUrl);\n  const data = await response.json();\n  return data;\n}\n\nexport async function updateAPI(url = \"\", data = {}, newUrl = null) {\n  const requestUrl = getStrapiURL(url);\n  await fetch(requestUrl, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  if (newUrl) {\n    Router.push(window.location.origin + newUrl);\n  } else {\n    Router.reload(window.location.pathname);\n  }\n}\n\nexport async function createAPI(url = \"\", data = {}) {\n  const requestUrl = getStrapiURL(url);\n  const response = await fetch(requestUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  console.log(response);\n  // Router.reload(window.location.pathname);\n}\n\nexport async function deleteAPI(url = \"\") {\n  const requestUrl = getStrapiURL(url);\n  await fetch(requestUrl, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  Router.push(\"/\");\n  // Router.reload(window.location.pathname);\n}\n"]},"metadata":{},"sourceType":"module"}